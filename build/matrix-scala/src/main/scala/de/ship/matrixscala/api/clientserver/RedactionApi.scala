/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.RedactionData._
import de.ship.matrixscala.json.clientserver.RedactionJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/redaction.yaml"
  */
object RedactionApi {

  /**
    * <h1>redactEvent</h1>
    *
    * Strips all information out of an event which isn't critical to the
    * integrity of the server-side representation of the room.
    *
    * This cannot be undone.
    *
    * Any user with a power level greater than or equal to the `m.room.redaction`
    * event power level may send redaction events in the room. If the user's power
    * level greater is also greater than or equal to the `redact` power level
    * of the room, the user may redact events sent by other users.
    *
    * Server administrators may redact events sent by users on their server.
    *
    * @param roomId The room from which to redact the event.
    *
    * @param eventId The ID of the event to redact
    *
    * @param txnId The [transaction ID](/client-server-api/#transaction-identifiers) for this event. Clients should generate a
    * unique ID; it will be used by the server to ensure idempotency of requests.
    */
  def redactEvent(
      body: RedactEvent.Body,
      roomId: String,
      eventId: String,
      txnId: String
  ): ApiRequest[AccessTokenAuthentication, RedactEvent.Body, RedactEvent.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/rooms/{roomId}/redact/{eventId}/{txnId}",
      httpMethod = HttpMethods.PUT,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[RedactEvent.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[RedactEvent.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomId"  -> roomId,
        "eventId" -> eventId,
        "txnId"   -> txnId
      ),
      inHeader = Map.empty
    )

}
