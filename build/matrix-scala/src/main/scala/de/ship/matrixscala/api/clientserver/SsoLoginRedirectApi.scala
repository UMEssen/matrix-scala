/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.SsoLoginRedirectData._
import de.ship.matrixscala.json.clientserver.SsoLoginRedirectJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/sso_login_redirect.yaml"
  */
object SsoLoginRedirectApi {

  /**
    * <h1>redirectToSSO</h1>
    *
    * A web-based Matrix client should instruct the user's browser to
    * navigate to this endpoint in order to log in via SSO.
    *
    * The server MUST respond with an HTTP redirect to the SSO interface,
    * or present a page which lets the user select an IdP to continue
    * with in the event multiple are supported by the server.
    *
    * @param redirectUrl URI to which the user will be redirected after the homeserver has
    * authenticated the user with SSO.
    */
  def redirectToSSO(
      redirectUrl: String
  ): ApiRequest[NoAuthentication, JsObject, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/login/sso/redirect",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(302, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("redirectUrl" -> redirectUrl)
      ),
      inPath = Map.empty,
      inHeader = Map.empty
    )

  /**
    * <h1>redirectToIdP</h1>
    *
    * This endpoint is the same as `/login/sso/redirect`, though with an
    * IdP ID from the original `identity_providers` array to inform the
    * server of which IdP the client/user would like to continue with.
    *
    * The server MUST respond with an HTTP redirect to the SSO interface
    * for that IdP.
    *
    * @param idpId The `id` of the IdP from the `m.login.sso` `identity_providers`
    * array denoting the user's selection.
    *
    * @param redirectUrl URI to which the user will be redirected after the homeserver has
    * authenticated the user with SSO.
    */
  def redirectToIdP(
      idpId: String,
      redirectUrl: String
  ): ApiRequest[NoAuthentication, JsObject, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/login/sso/redirect/{idpId}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(302, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("redirectUrl" -> redirectUrl)
      ),
      inPath = Map(
        "idpId" -> idpId
      ),
      inHeader = Map.empty
    )

}
