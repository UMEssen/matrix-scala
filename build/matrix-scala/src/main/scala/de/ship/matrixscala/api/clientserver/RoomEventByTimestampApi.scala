/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.RoomEventByTimestampData._
import de.ship.matrixscala.json.clientserver.RoomEventByTimestampJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/room_event_by_timestamp.yaml"
  */
object RoomEventByTimestampApi {

  /**
    * <h1>getEventByTimestamp</h1>
    *
    * Get the ID of the event closest to the given timestamp, in the
    * direction specified by the `dir` parameter.
    *
    * If the server does not have all of the room history and does not have
    * an event suitably close to the requested timestamp, it can use the
    * corresponding [federation endpoint](/server-server-api/#get_matrixfederationv1timestamp_to_eventroomid)
    * to ask other servers for a suitable event.
    *
    * After calling this endpoint, clients can call
    * [`/rooms/{roomId}/context/{eventId}`](#get_matrixclientv3roomsroomidcontexteventid)
    * to obtain a pagination token to retrieve the events around the returned event.
    *
    * The event returned by this endpoint could be an event that the client
    * cannot render, and so may need to paginate in order to locate an event
    * that it can display, which may end up being outside of the client's
    * suitable range.  Clients can employ different strategies to display
    * something reasonable to the user.  For example, the client could try
    * paginating in one direction for a while, while looking at the
    * timestamps of the events that it is paginating through, and if it
    * exceeds a certain difference from the target timestamp, it can try
    * paginating in the opposite direction.  The client could also simply
    * paginate in one direction and inform the user that the closest event
    * found in that direction is outside of the expected range.
    *
    * @param roomId The ID of the room to search
    *
    * @param ts The timestamp to search from, as given in milliseconds
    * since the Unix epoch.
    *
    * @param dir The direction in which to search.  `f` for forwards, `b` for backwards.
    */
  def getEventByTimestamp(
      roomId: String,
      ts: Int,
      dir: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, GetEventByTimestamp.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v1/rooms/{roomId}/timestamp_to_event",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetEventByTimestamp.OK]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Int]("ts"     -> ts),
        fromQueryEntry[String]("dir" -> dir)
      ),
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

}
