/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.NotificationsData._
import de.ship.matrixscala.json.clientserver.NotificationsJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/notifications.yaml"
  */
object NotificationsApi {

  /**
    * <h1>getNotifications</h1>
    *
    * This API is used to paginate through the list of events that the
    * user has been, or would have been notified about.
    *
    * @param from Pagination token to continue from. This should be the `next_token`
    * returned from an earlier call to this endpoint.
    *
    * @param limit Limit on the number of events to return in this request.
    *
    * @param only Allows basic filtering of events returned. Supply `highlight`
    * to return only events where the notification had the highlight
    * tweak set.
    */
  def getNotifications(
      from: Option[String] = None,
      limit: Option[Int] = None,
      only: Option[String] = None
  ): ApiRequest[AccessTokenAuthentication, JsObject, GetNotifications.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/notifications",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetNotifications.OK]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[String]]("from" -> from),
        fromQueryEntry[Option[Int]]("limit"   -> limit),
        fromQueryEntry[Option[String]]("only" -> only)
      ),
      inPath = Map.empty,
      inHeader = Map.empty
    )

}
