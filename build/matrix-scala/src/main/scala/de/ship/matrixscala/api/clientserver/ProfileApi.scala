/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.ProfileData._
import de.ship.matrixscala.json.clientserver.ProfileJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/profile.yaml"
  */
object ProfileApi {

  /**
    * <h1>getDisplayName</h1>
    *
    * Get the user's display name. This API may be used to fetch the user's
    * own displayname or to query the name of other users; either locally or
    * on remote homeservers.
    *
    * @param userId The user whose display name to get.
    */
  def getDisplayName(
      userId: String
  ): ApiRequest[NoAuthentication, JsObject, GetDisplayName.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/profile/{userId}/displayname",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetDisplayName.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "userId" -> userId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>setDisplayName</h1>
    *
    * This API sets the given user's display name. You must have permission to
    * set this user's display name, e.g. you need to have their `access_token`.
    *
    * @param userId The user whose display name to set.
    */
  def setDisplayName(
      body: SetDisplayName.Body,
      userId: String
  ): ApiRequest[AccessTokenAuthentication, SetDisplayName.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/profile/{userId}/displayname",
      httpMethod = HttpMethods.PUT,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[SetDisplayName.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "userId" -> userId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>getAvatarUrl</h1>
    *
    * Get the user's avatar URL. This API may be used to fetch the user's
    * own avatar URL or to query the URL of other users; either locally or
    * on remote homeservers.
    *
    * @param userId The user whose avatar URL to get.
    */
  def getAvatarUrl(
      userId: String
  ): ApiRequest[NoAuthentication, JsObject, GetAvatarUrl.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/profile/{userId}/avatar_url",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetAvatarUrl.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "userId" -> userId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>setAvatarUrl</h1>
    *
    * This API sets the given user's avatar URL. You must have permission to
    * set this user's avatar URL, e.g. you need to have their `access_token`.
    *
    * @param userId The user whose avatar URL to set.
    */
  def setAvatarUrl(
      body: SetAvatarUrl.Body,
      userId: String
  ): ApiRequest[AccessTokenAuthentication, SetAvatarUrl.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/profile/{userId}/avatar_url",
      httpMethod = HttpMethods.PUT,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[SetAvatarUrl.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "userId" -> userId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>getUserProfile</h1>
    *
    * Get the combined profile information for this user. This API may be used
    * to fetch the user's own profile information or other users; either
    * locally or on remote homeservers. This API may return keys which are not
    * limited to `displayname` or `avatar_url`.
    *
    * @param userId The user whose profile information to get.
    */
  def getUserProfile(
      userId: String
  ): ApiRequest[NoAuthentication, JsObject, GetUserProfile.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/profile/{userId}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetUserProfile.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "userId" -> userId
      ),
      inHeader = Map.empty
    )

}
