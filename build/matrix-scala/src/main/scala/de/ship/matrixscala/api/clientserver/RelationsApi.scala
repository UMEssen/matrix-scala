/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.RelationsData._
import de.ship.matrixscala.json.clientserver.RelationsJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/relations.yaml"
  */
object RelationsApi {

  /**
    * <h1>getRelatingEvents</h1>
    *
    * Retrieve all of the child events for a given parent event.
    *
    * Note that when paginating the `from` token should be "after" the `to` token in
    * terms of topological ordering, because it is only possible to paginate "backwards"
    * through events, starting at `from`.
    *
    * For example, passing a `from` token from page 2 of the results, and a `to` token
    * from page 1, would return the empty set. The caller can use a `from` token from
    * page 1 and a `to` token from page 2 to paginate over the same range, however.
    *
    * @param roomId The ID of the room containing the parent event.
    *
    * @param eventId The ID of the parent event whose child events are to be returned.
    *
    * @param from The pagination token to start returning results from. If not supplied, results
    * start at the most recent topological event known to the server.
    *
    * Can be a `next_batch` or `prev_batch` token from a previous call, or a returned
    * `start` token from [`/messages`](/client-server-api/#get_matrixclientv3roomsroomidmessages),
    * or a `next_batch` token from [`/sync`](/client-server-api/#get_matrixclientv3sync).
    *
    * @param to The pagination token to stop returning results at. If not supplied, results
    * continue up to `limit` or until there are no more events.
    *
    * Like `from`, this can be a previous token from a prior call to this endpoint
    * or from `/messages` or `/sync`.
    *
    * @param limit The maximum number of results to return in a single `chunk`. The server can
    * and should apply a maximum value to this parameter to avoid large responses.
    *
    * Similarly, the server should apply a default value when not supplied.
    *
    * @param dir Optional (default `b`) direction to return events from. If this is set to `f`, events
    * will be returned in chronological order starting at `from`. If it
    * is set to `b`, events will be returned in *reverse* chronological
    * order, again starting at `from`.
    */
  def getRelatingEvents(
      roomId: String,
      eventId: String,
      from: Option[String] = None,
      to: Option[String] = None,
      limit: Option[Int] = None,
      dir: Option[String] = None
  ): ApiRequest[AccessTokenAuthentication, JsObject, GetRelatingEvents.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v1/rooms/{roomId}/relations/{eventId}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetRelatingEvents.OK]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[String]]("from" -> from),
        fromQueryEntry[Option[String]]("to"   -> to),
        fromQueryEntry[Option[Int]]("limit"   -> limit),
        fromQueryEntry[Option[String]]("dir"  -> dir)
      ),
      inPath = Map(
        "roomId"  -> roomId,
        "eventId" -> eventId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>getRelatingEventsWithRelType</h1>
    *
    * Retrieve all of the child events for a given parent event which relate to the parent
    * using the given `relType`.
    *
    * Note that when paginating the `from` token should be "after" the `to` token in
    * terms of topological ordering, because it is only possible to paginate "backwards"
    * through events, starting at `from`.
    *
    * For example, passing a `from` token from page 2 of the results, and a `to` token
    * from page 1, would return the empty set. The caller can use a `from` token from
    * page 1 and a `to` token from page 2 to paginate over the same range, however.
    *
    * @param roomId The ID of the room containing the parent event.
    *
    * @param eventId The ID of the parent event whose child events are to be returned.
    *
    * @param relType The [relationship type](/client-server-api/#relationship-types) to search for.
    *
    * @param from The pagination token to start returning results from. If not supplied, results
    * start at the most recent topological event known to the server.
    *
    * Can be a `next_batch` or `prev_batch` token from a previous call, or a returned
    * `start` token from [`/messages`](/client-server-api/#get_matrixclientv3roomsroomidmessages),
    * or a `next_batch` token from [`/sync`](/client-server-api/#get_matrixclientv3sync).
    *
    * @param to The pagination token to stop returning results at. If not supplied, results
    * continue up to `limit` or until there are no more events.
    *
    * Like `from`, this can be a previous token from a prior call to this endpoint
    * or from `/messages` or `/sync`.
    *
    * @param limit The maximum number of results to return in a single `chunk`. The server can
    * and should apply a maximum value to this parameter to avoid large responses.
    *
    * Similarly, the server should apply a default value when not supplied.
    *
    * @param dir Optional (default `b`) direction to return events from. If this is set to `f`, events
    * will be returned in chronological order starting at `from`. If it
    * is set to `b`, events will be returned in *reverse* chronological
    * order, again starting at `from`.
    */
  def getRelatingEventsWithRelType(
      roomId: String,
      eventId: String,
      relType: String,
      from: Option[String] = None,
      to: Option[String] = None,
      limit: Option[Int] = None,
      dir: Option[String] = None
  ): ApiRequest[AccessTokenAuthentication, JsObject, GetRelatingEventsWithRelType.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v1/rooms/{roomId}/relations/{eventId}/{relType}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetRelatingEventsWithRelType.OK]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[String]]("from" -> from),
        fromQueryEntry[Option[String]]("to"   -> to),
        fromQueryEntry[Option[Int]]("limit"   -> limit),
        fromQueryEntry[Option[String]]("dir"  -> dir)
      ),
      inPath = Map(
        "roomId"  -> roomId,
        "eventId" -> eventId,
        "relType" -> relType
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>getRelatingEventsWithRelTypeAndEventType</h1>
    *
    * Retrieve all of the child events for a given parent event which relate to the parent
    * using the given `relType` and have the given `eventType`.
    *
    * Note that when paginating the `from` token should be "after" the `to` token in
    * terms of topological ordering, because it is only possible to paginate "backwards"
    * through events, starting at `from`.
    *
    * For example, passing a `from` token from page 2 of the results, and a `to` token
    * from page 1, would return the empty set. The caller can use a `from` token from
    * page 1 and a `to` token from page 2 to paginate over the same range, however.
    *
    * @param roomId The ID of the room containing the parent event.
    *
    * @param eventId The ID of the parent event whose child events are to be returned.
    *
    * @param relType The [relationship type](/client-server-api/#relationship-types) to search for.
    *
    * @param eventType The event type of child events to search for.
    *
    * Note that in encrypted rooms this will typically always be `m.room.encrypted`
    * regardless of the event type contained within the encrypted payload.
    *
    * @param from The pagination token to start returning results from. If not supplied, results
    * start at the most recent topological event known to the server.
    *
    * Can be a `next_batch` or `prev_batch` token from a previous call, or a returned
    * `start` token from [`/messages`](/client-server-api/#get_matrixclientv3roomsroomidmessages),
    * or a `next_batch` token from [`/sync`](/client-server-api/#get_matrixclientv3sync).
    *
    * @param to The pagination token to stop returning results at. If not supplied, results
    * continue up to `limit` or until there are no more events.
    *
    * Like `from`, this can be a previous token from a prior call to this endpoint
    * or from `/messages` or `/sync`.
    *
    * @param limit The maximum number of results to return in a single `chunk`. The server can
    * and should apply a maximum value to this parameter to avoid large responses.
    *
    * Similarly, the server should apply a default value when not supplied.
    *
    * @param dir Optional (default `b`) direction to return events from. If this is set to `f`, events
    * will be returned in chronological order starting at `from`. If it
    * is set to `b`, events will be returned in *reverse* chronological
    * order, again starting at `from`.
    */
  def getRelatingEventsWithRelTypeAndEventType(
      roomId: String,
      eventId: String,
      relType: String,
      eventType: String,
      from: Option[String] = None,
      to: Option[String] = None,
      limit: Option[Int] = None,
      dir: Option[String] = None
  ): ApiRequest[AccessTokenAuthentication, JsObject, GetRelatingEventsWithRelTypeAndEventType.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v1/rooms/{roomId}/relations/{eventId}/{relType}/{eventType}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(
          200,
          implicitly[RootJsonFormat[GetRelatingEventsWithRelTypeAndEventType.OK]]
        )
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[String]]("from" -> from),
        fromQueryEntry[Option[String]]("to"   -> to),
        fromQueryEntry[Option[Int]]("limit"   -> limit),
        fromQueryEntry[Option[String]]("dir"  -> dir)
      ),
      inPath = Map(
        "roomId"    -> roomId,
        "eventId"   -> eventId,
        "relType"   -> relType,
        "eventType" -> eventType
      ),
      inHeader = Map.empty
    )

}
