/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.KeyBackupData._
import de.ship.matrixscala.json.clientserver.KeyBackupJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/key_backup.yaml"
  */
object KeyBackupApi {

  /**
    * <h1>getRoomKeysVersionCurrent</h1>
    *
    * Get information about the latest backup version.
    */
  def getRoomKeysVersionCurrent(
  ): ApiRequest[AccessTokenAuthentication, JsObject, GetRoomKeysVersionCurrent.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/version",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetRoomKeysVersionCurrent.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map.empty,
      inHeader = Map.empty
    )

  /**
    * <h1>postRoomKeysVersion</h1>
    *
    * Creates a new backup.
    */
  def postRoomKeysVersion(
      body: PostRoomKeysVersion.Body
  ): ApiRequest[AccessTokenAuthentication, PostRoomKeysVersion.Body, PostRoomKeysVersion.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/version",
      httpMethod = HttpMethods.POST,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[PostRoomKeysVersion.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[PostRoomKeysVersion.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map.empty,
      inHeader = Map.empty
    )

  /**
    * <h1>getRoomKeysVersion</h1>
    *
    * Get information about an existing backup.
    *
    * @param version The backup version to get, as returned in the `version` parameter
    * of the response in
    * [`POST /_matrix/client/v3/room_keys/version`](/client-server-api/#post_matrixclientv3room_keysversion)
    * or this endpoint.
    */
  def getRoomKeysVersion(
      version: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, GetRoomKeysVersion.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/version/{version}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetRoomKeysVersion.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "version" -> version
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>putRoomKeysVersion</h1>
    *
    * Update information about an existing backup.  Only `auth_data` can be modified.
    *
    * @param version The backup version to update, as returned in the `version`
    * parameter in the response of
    * [`POST /_matrix/client/v3/room_keys/version`](/client-server-api/#post_matrixclientv3room_keysversion)
    * or [`GET /_matrix/client/v3/room_keys/version/{version}`](/client-server-api/#get_matrixclientv3room_keysversionversion).
    */
  def putRoomKeysVersion(
      body: PutRoomKeysVersion.Body,
      version: String
  ): ApiRequest[AccessTokenAuthentication, PutRoomKeysVersion.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/version/{version}",
      httpMethod = HttpMethods.PUT,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[PutRoomKeysVersion.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "version" -> version
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>deleteRoomKeysVersion</h1>
    *
    * Delete an existing key backup. Both the information about the backup,
    * as well as all key data related to the backup will be deleted.
    *
    * @param version The backup version to delete, as returned in the `version`
    * parameter in the response of
    * [`POST /_matrix/client/v3/room_keys/version`](/client-server-api/#post_matrixclientv3room_keysversion)
    * or [`GET /_matrix/client/v3/room_keys/version/{version}`](/client-server-api/#get_matrixclientv3room_keysversionversion).
    */
  def deleteRoomKeysVersion(
      version: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, DeleteRoomKeysVersion.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/version/{version}",
      httpMethod = HttpMethods.DELETE,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[DeleteRoomKeysVersion.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "version" -> version
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>getRoomKeyBySessionId</h1>
    *
    * Retrieve a key from the backup.
    *
    * @param roomId The ID of the room that the requested key is for.
    *
    * @param sessionId The ID of the megolm session whose key is requested.
    *
    * @param version The backup from which to retrieve the key.
    */
  def getRoomKeyBySessionId(
      roomId: String,
      sessionId: String,
      version: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, Definitions.KeyBackupData] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/keys/{roomId}/{sessionId}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Definitions.KeyBackupData]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("version" -> version)
      ),
      inPath = Map(
        "roomId"    -> roomId,
        "sessionId" -> sessionId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>putRoomKeyBySessionId</h1>
    *
    * Store a key in the backup.
    *
    * @param roomId The ID of the room that the key is for.
    *
    * @param sessionId The ID of the megolm session that the key is for.
    *
    * @param version The backup in which to store the key. Must be the current backup.
    */
  def putRoomKeyBySessionId(
      body: JsObject,
      roomId: String,
      sessionId: String,
      version: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, PutRoomKeyBySessionId.RoomKeysUpdateResponse] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/keys/{roomId}/{sessionId}",
      httpMethod = HttpMethods.PUT,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(
          200,
          implicitly[RootJsonFormat[PutRoomKeyBySessionId.RoomKeysUpdateResponse]]
        )
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("version" -> version)
      ),
      inPath = Map(
        "roomId"    -> roomId,
        "sessionId" -> sessionId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>deleteRoomKeyBySessionId</h1>
    *
    * Delete a key from the backup.
    *
    * @param roomId The ID of the room that the specified key is for.
    *
    * @param sessionId The ID of the megolm session whose key is to be deleted.
    *
    * @param version The backup from which to delete the key
    */
  def deleteRoomKeyBySessionId(
      roomId: String,
      sessionId: String,
      version: String
  ): ApiRequest[
    AccessTokenAuthentication,
    JsObject,
    DeleteRoomKeyBySessionId.RoomKeysUpdateResponse
  ] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/keys/{roomId}/{sessionId}",
      httpMethod = HttpMethods.DELETE,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(
          200,
          implicitly[RootJsonFormat[DeleteRoomKeyBySessionId.RoomKeysUpdateResponse]]
        )
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("version" -> version)
      ),
      inPath = Map(
        "roomId"    -> roomId,
        "sessionId" -> sessionId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>getRoomKeysByRoomId</h1>
    *
    * Retrieve the keys from the backup for a given room.
    *
    * @param roomId The ID of the room that the requested key is for.
    *
    * @param version The backup from which to retrieve the key.
    */
  def getRoomKeysByRoomId(
      roomId: String,
      version: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, Definitions.RoomKeyBackup] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/keys/{roomId}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Definitions.RoomKeyBackup]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("version" -> version)
      ),
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>putRoomKeysByRoomId</h1>
    *
    * Store several keys in the backup for a given room.
    *
    * @param roomId The ID of the room that the keys are for.
    *
    * @param version The backup in which to store the keys. Must be the current backup.
    */
  def putRoomKeysByRoomId(
      body: JsObject,
      roomId: String,
      version: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, PutRoomKeysByRoomId.RoomKeysUpdateResponse] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/keys/{roomId}",
      httpMethod = HttpMethods.PUT,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(
          200,
          implicitly[RootJsonFormat[PutRoomKeysByRoomId.RoomKeysUpdateResponse]]
        )
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("version" -> version)
      ),
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>deleteRoomKeysByRoomId</h1>
    *
    * Delete the keys from the backup for a given room.
    *
    * @param roomId The ID of the room that the specified key is for.
    *
    * @param version The backup from which to delete the key.
    */
  def deleteRoomKeysByRoomId(
      roomId: String,
      version: String
  ): ApiRequest[
    AccessTokenAuthentication,
    JsObject,
    DeleteRoomKeysByRoomId.RoomKeysUpdateResponse
  ] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/keys/{roomId}",
      httpMethod = HttpMethods.DELETE,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(
          200,
          implicitly[RootJsonFormat[DeleteRoomKeysByRoomId.RoomKeysUpdateResponse]]
        )
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("version" -> version)
      ),
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>getRoomKeys</h1>
    *
    * Retrieve the keys from the backup.
    *
    * @param version The backup from which to retrieve the keys.
    */
  def getRoomKeys(
      version: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, GetRoomKeys.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/keys",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetRoomKeys.OK]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("version" -> version)
      ),
      inPath = Map.empty,
      inHeader = Map.empty
    )

  /**
    * <h1>putRoomKeys</h1>
    *
    * Store several keys in the backup.
    *
    * @param version The backup in which to store the keys. Must be the current backup.
    */
  def putRoomKeys(
      body: PutRoomKeys.Body,
      version: String
  ): ApiRequest[AccessTokenAuthentication, PutRoomKeys.Body, PutRoomKeys.RoomKeysUpdateResponse] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/keys",
      httpMethod = HttpMethods.PUT,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[PutRoomKeys.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[PutRoomKeys.RoomKeysUpdateResponse]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("version" -> version)
      ),
      inPath = Map.empty,
      inHeader = Map.empty
    )

  /**
    * <h1>deleteRoomKeys</h1>
    *
    * Delete the keys from the backup.
    *
    * @param version The backup from which to delete the key
    */
  def deleteRoomKeys(
      version: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, DeleteRoomKeys.RoomKeysUpdateResponse] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/room_keys/keys",
      httpMethod = HttpMethods.DELETE,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(
          200,
          implicitly[RootJsonFormat[DeleteRoomKeys.RoomKeysUpdateResponse]]
        )
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("version" -> version)
      ),
      inPath = Map.empty,
      inHeader = Map.empty
    )

}
