/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.ThirdPartyMembershipData._
import de.ship.matrixscala.json.clientserver.ThirdPartyMembershipJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/third_party_membership.yaml"
  */
object ThirdPartyMembershipApi {

  /**
    * <h1>inviteBy3PID</h1>
    *
    * Note that there are two forms of this API, which are documented separately.
    * This version of the API does not require that the inviter know the Matrix
    * identifier of the invitee, and instead relies on third-party identifiers.
    * The homeserver uses an identity server to perform the mapping from
    * third-party identifier to a Matrix identifier. The other is documented in the*
    * [joining rooms section](/client-server-api/#post_matrixclientv3roomsroomidinvite).
    *
    * This API invites a user to participate in a particular room.
    * They do not start participating in the room until they actually join the
    * room.
    *
    * Only users currently in a particular room can invite other users to
    * join that room.
    *
    * If the identity server did know the Matrix user identifier for the
    * third-party identifier, the homeserver will append a `m.room.member`
    * event to the room.
    *
    * If the identity server does not know a Matrix user identifier for the
    * passed third-party identifier, the homeserver will issue an invitation
    * which can be accepted upon providing proof of ownership of the third-
    * party identifier. This is achieved by the identity server generating a
    * token, which it gives to the inviting homeserver. The homeserver will
    * add an `m.room.third_party_invite` event into the graph for the room,
    * containing that token.
    *
    * When the invitee binds the invited third-party identifier to a Matrix
    * user ID, the identity server will give the user a list of pending
    * invitations, each containing:
    *
    * - The room ID to which they were invited
    *
    * - The token given to the homeserver
    *
    * - A signature of the token, signed with the identity server's private key
    *
    * - The matrix user ID who invited them to the room
    *
    * If a token is requested from the identity server, the homeserver will
    * append a `m.room.third_party_invite` event to the room.
    *
    * @param roomId The room identifier (not alias) to which to invite the user.
    */
  def inviteBy3PID(
      body: InviteBy3PID.Body,
      roomId: String
  ): ApiRequest[AccessTokenAuthentication, InviteBy3PID.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/rooms/{roomId}/invite",
      httpMethod = HttpMethods.POST,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[InviteBy3PID.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

}
