/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.applicationservice

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.applicationservice.TransactionsData._
import de.ship.matrixscala.json.applicationservice.TransactionsJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/application-service/transactions.yaml"
  */
object TransactionsApi {

  /**
    * <h1>sendTransaction</h1>
    *
    * This API is called by the homeserver when it wants to push an event
    * (or batch of events) to the application service.
    *
    * Note that the application service should distinguish state events
    * from message events via the presence of a `state_key`, rather than
    * via the event type.
    *
    * @param txnId The transaction ID for this set of events. Homeservers generate
    * these IDs and they are used to ensure idempotency of requests.
    */
  def sendTransaction(
      body: SendTransaction.Body,
      txnId: String
  ): ApiRequest[HomeserverAccessTokenAuthentication, SendTransaction.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/app/v1/transactions/{txnId}",
      httpMethod = HttpMethods.PUT,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[SendTransaction.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "txnId" -> txnId
      ),
      inHeader = Map.empty
    )

}
