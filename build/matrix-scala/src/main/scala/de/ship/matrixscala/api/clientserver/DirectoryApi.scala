/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.DirectoryData._
import de.ship.matrixscala.json.clientserver.DirectoryJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/directory.yaml"
  */
object DirectoryApi {

  /**
    * <h1>getRoomIdByAlias</h1>
    *
    * Requests that the server resolve a room alias to a room ID.
    *
    * The server will use the federation API to resolve the alias if the
    * domain part of the alias does not correspond to the server's own
    * domain.
    *
    * @param roomAlias The room alias. Its format is defined
    * [in the appendices](/appendices/#room-aliases).
    */
  def getRoomIdByAlias(
      roomAlias: String
  ): ApiRequest[NoAuthentication, JsObject, GetRoomIdByAlias.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/directory/room/{roomAlias}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetRoomIdByAlias.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomAlias" -> roomAlias
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>setRoomAlias</h1>
    *
    * @param roomAlias The room alias to set. Its format is defined
    * [in the appendices](/appendices/#room-aliases).
    */
  def setRoomAlias(
      body: SetRoomAlias.Body,
      roomAlias: String
  ): ApiRequest[AccessTokenAuthentication, SetRoomAlias.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/directory/room/{roomAlias}",
      httpMethod = HttpMethods.PUT,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[SetRoomAlias.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomAlias" -> roomAlias
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>deleteRoomAlias</h1>
    *
    * Remove a mapping of room alias to room ID.
    *
    * Servers may choose to implement additional access control checks here, for instance that
    * room aliases can only be deleted by their creator or a server administrator.
    *
    * *Note:**
    * Servers may choose to update the `alt_aliases` for the `m.room.canonical_alias`
    * state event in the room when an alias is removed. Servers which choose to update the
    * canonical alias event are recommended to, in addition to their other relevant permission
    * checks, delete the alias and return a successful response even if the user does not
    * have permission to update the `m.room.canonical_alias` event.
    *
    * @param roomAlias The room alias to remove. Its format is defined
    * [in the appendices](/appendices/#room-aliases).
    */
  def deleteRoomAlias(
      roomAlias: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/directory/room/{roomAlias}",
      httpMethod = HttpMethods.DELETE,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomAlias" -> roomAlias
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>getLocalAliases</h1>
    *
    * Get a list of aliases maintained by the local server for the
    * given room.
    *
    * This endpoint can be called by users who are in the room (external
    * users receive an `M_FORBIDDEN` error response). If the room's
    * `m.room.history_visibility` maps to `world_readable`, any
    * user can call this endpoint.
    *
    * Servers may choose to implement additional access control checks here,
    * such as allowing server administrators to view aliases regardless of
    * membership.
    *
    * *Note:**
    * Clients are recommended not to display this list of aliases prominently
    * as they are not curated, unlike those listed in the `m.room.canonical_alias`
    * state event.
    *
    * @param roomId The room ID to find local aliases of.
    */
  def getLocalAliases(
      roomId: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, GetLocalAliases.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/rooms/{roomId}/aliases",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetLocalAliases.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

}
