/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.KnockingData._
import de.ship.matrixscala.json.clientserver.KnockingJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/knocking.yaml"
  */
object KnockingApi {

  /**
    * <h1>knockRoom</h1>
    *
    * Note that this API takes either a room ID or alias, unlike other membership APIs.*
    *
    * This API "knocks" on the room to ask for permission to join, if the user
    * is allowed to knock on the room. Acceptance of the knock happens out of
    * band from this API, meaning that the client will have to watch for updates
    * regarding the acceptance/rejection of the knock.
    *
    * If the room history settings allow, the user will still be able to see
    * history of the room while being in the "knock" state. The user will have
    * to accept the invitation to join the room (acceptance of knock) to see
    * messages reliably. See the `/join` endpoints for more information about
    * history visibility to the user.
    *
    * The knock will appear as an entry in the response of the
    * [`/sync`](/client-server-api/#get_matrixclientv3sync) API.
    *
    * @param roomIdOrAlias The room identifier or alias to knock upon.
    *
    * @param server_name The servers to attempt to knock on the room through. One of the servers
    * must be participating in the room.
    */
  def knockRoom(
      body: KnockRoom.Body,
      roomIdOrAlias: String,
      server_name: Option[Seq[String]] = None
  ): ApiRequest[AccessTokenAuthentication, KnockRoom.Body, KnockRoom.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/knock/{roomIdOrAlias}",
      httpMethod = HttpMethods.POST,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[KnockRoom.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[KnockRoom.OK]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[Seq[String]]]("server_name" -> server_name)
      ),
      inPath = Map(
        "roomIdOrAlias" -> roomIdOrAlias
      ),
      inHeader = Map.empty
    )

}
