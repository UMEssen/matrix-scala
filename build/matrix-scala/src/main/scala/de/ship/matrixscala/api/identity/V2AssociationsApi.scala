/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.identity

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.identity.V2AssociationsData._
import de.ship.matrixscala.json.identity.V2AssociationsJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/identity/v2_associations.yaml"
  */
object V2AssociationsApi {

  /**
    * <h1>getValidated3pidV2</h1>
    *
    * Determines if a given 3pid has been validated by a user.
    *
    * @param sid The Session ID generated by the `requestToken` call.
    *
    * @param client_secret The client secret passed to the `requestToken` call.
    */
  def getValidated3pidV2(
      sid: String,
      client_secret: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, GetValidated3pidV2.OK] =
    ApiRequest(
      endpoint = "/_matrix/identity/v2/3pid/getValidated3pid",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetValidated3pidV2.OK]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("sid"           -> sid),
        fromQueryEntry[String]("client_secret" -> client_secret)
      ),
      inPath = Map.empty,
      inHeader = Map.empty
    )

  /**
    * <h1>bindV2</h1>
    *
    * Publish an association between a session and a Matrix user ID.
    *
    * Future calls to `/lookup` for any of the session\'s 3pids will return
    * this association.
    *
    * Note: for backwards compatibility with previous drafts of this
    * specification, the parameters may also be specified as
    * `application/x-form-www-urlencoded` data.  However, this usage is
    * deprecated.
    */
  def bindV2(
      body: BindV2.Body
  ): ApiRequest[AccessTokenAuthentication, BindV2.Body, BindV2.OK] =
    ApiRequest(
      endpoint = "/_matrix/identity/v2/3pid/bind",
      httpMethod = HttpMethods.POST,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[BindV2.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[BindV2.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map.empty,
      inHeader = Map.empty
    )

  /**
    * <h1>unbindV2</h1>
    *
    * Remove an association between a session and a Matrix user ID.
    *
    * Future calls to `/lookup` for any of the session's 3pids will not
    * return the removed association.
    *
    * The identity server should authenticate the request in one of two
    * ways:
    *
    * 1. The request is signed by the homeserver which controls the `user_id`.
    * 2. The request includes the `sid` and `client_secret` parameters,
    *   as per `/3pid/bind`, which proves ownership of the 3PID.
    *
    * If this endpoint returns a JSON Matrix error, that error should be passed
    * through to the client requesting an unbind through a homeserver, if the
    * homeserver is acting on behalf of a client.
    */
  def unbindV2(
      body: UnbindV2.Body
  ): ApiRequest[AccessTokenAuthentication, UnbindV2.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/identity/v2/3pid/unbind",
      httpMethod = HttpMethods.POST,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[UnbindV2.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map.empty,
      inHeader = Map.empty
    )

}
