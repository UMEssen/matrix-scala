/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.applicationservice

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.applicationservice.ProtocolsData._
import de.ship.matrixscala.json.applicationservice.ProtocolsJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/application-service/protocols.yaml"
  */
object ProtocolsApi {

  /**
    * <h1>getProtocolMetadata</h1>
    *
    * This API is called by the homeserver when it wants to present clients
    * with specific information about the various third-party networks that
    * an application service supports.
    *
    * @param protocol The protocol ID.
    */
  def getProtocolMetadata(
      protocol: String
  ): ApiRequest[HomeserverAccessTokenAuthentication, JsObject, Definitions.Protocol] =
    ApiRequest(
      endpoint = "/_matrix/app/v1/thirdparty/protocol/{protocol}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Definitions.Protocol]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "protocol" -> protocol
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>queryUserByProtocol</h1>
    *
    * This API is called by the homeserver in order to retrieve a Matrix
    * User ID linked to a user on the third-party network, given a set of
    * user parameters.
    *
    * @param protocol The protocol ID.
    *
    * @param fields... One or more custom fields that are passed to the application
    * service to help identify the user.
    */
  def queryUserByProtocol(
      protocol: String,
      `fields...`: Option[String] = None
  ): ApiRequest[HomeserverAccessTokenAuthentication, JsObject, Seq[Definitions.User]] =
    ApiRequest(
      endpoint = "/_matrix/app/v1/thirdparty/user/{protocol}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Seq[Definitions.User]]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[String]]("fields..." -> `fields...`)
      ),
      inPath = Map(
        "protocol" -> protocol
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>queryLocationByProtocol</h1>
    *
    * Retrieve a list of Matrix portal rooms that lead to the matched third-party location.
    *
    * @param protocol The protocol ID.
    *
    * @param fields... One or more custom fields that are passed to the application
    * service to help identify the third-party location.
    */
  def queryLocationByProtocol(
      protocol: String,
      `fields...`: Option[String] = None
  ): ApiRequest[HomeserverAccessTokenAuthentication, JsObject, Seq[Definitions.Location]] =
    ApiRequest(
      endpoint = "/_matrix/app/v1/thirdparty/location/{protocol}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Seq[Definitions.Location]]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[String]]("fields..." -> `fields...`)
      ),
      inPath = Map(
        "protocol" -> protocol
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>queryLocationByAlias</h1>
    *
    * Retrieve an array of third-party network locations from a Matrix room
    * alias.
    *
    * @param alias The Matrix room alias to look up.
    */
  def queryLocationByAlias(
      alias: Option[String] = None
  ): ApiRequest[HomeserverAccessTokenAuthentication, JsObject, Seq[Definitions.Location]] =
    ApiRequest(
      endpoint = "/_matrix/app/v1/thirdparty/location",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Seq[Definitions.Location]]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[String]]("alias" -> alias)
      ),
      inPath = Map.empty,
      inHeader = Map.empty
    )

  /**
    * <h1>queryUserByID</h1>
    *
    * Retrieve an array of third-party users from a Matrix User ID.
    *
    * @param userid The Matrix User ID to look up.
    */
  def queryUserByID(
      userid: Option[String] = None
  ): ApiRequest[HomeserverAccessTokenAuthentication, JsObject, Seq[Definitions.User]] =
    ApiRequest(
      endpoint = "/_matrix/app/v1/thirdparty/user",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Seq[Definitions.User]]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[String]]("userid" -> userid)
      ),
      inPath = Map.empty,
      inHeader = Map.empty
    )

}
