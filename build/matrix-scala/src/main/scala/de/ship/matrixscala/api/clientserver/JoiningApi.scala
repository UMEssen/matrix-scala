/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.JoiningData._
import de.ship.matrixscala.json.clientserver.JoiningJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/joining.yaml"
  */
object JoiningApi {

  /**
    * <h1>joinRoomById</h1>
    *
    * Note that this API requires a room ID, not alias.*
    * `/join/{roomIdOrAlias}` *exists if you have a room alias.*
    *
    * This API starts a user participating in a particular room, if that user
    * is allowed to participate in that room. After this call, the client is
    * allowed to see all current state events in the room, and all subsequent
    * events associated with the room until the user leaves the room.
    *
    * After a user has joined a room, the room will appear as an entry in the
    * response of the [`/initialSync`](/client-server-api/#get_matrixclientv3initialsync)
    * and [`/sync`](/client-server-api/#get_matrixclientv3sync) APIs.
    *
    * @param roomId The room identifier (not alias) to join.
    */
  def joinRoomById(
      body: JoinRoomById.Body,
      roomId: String
  ): ApiRequest[AccessTokenAuthentication, JoinRoomById.Body, JoinRoomById.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/rooms/{roomId}/join",
      httpMethod = HttpMethods.POST,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[JoinRoomById.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JoinRoomById.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>joinRoom</h1>
    *
    * Note that this API takes either a room ID or alias, unlike* `/rooms/{roomId}/join`.
    *
    * This API starts a user participating in a particular room, if that user
    * is allowed to participate in that room. After this call, the client is
    * allowed to see all current state events in the room, and all subsequent
    * events associated with the room until the user leaves the room.
    *
    * After a user has joined a room, the room will appear as an entry in the
    * response of the [`/initialSync`](/client-server-api/#get_matrixclientv3initialsync)
    * and [`/sync`](/client-server-api/#get_matrixclientv3sync) APIs.
    *
    * @param roomIdOrAlias The room identifier or alias to join.
    *
    * @param server_name The servers to attempt to join the room through. One of the servers
    * must be participating in the room.
    */
  def joinRoom(
      body: JoinRoom.Body,
      roomIdOrAlias: String,
      server_name: Option[Seq[String]] = None
  ): ApiRequest[AccessTokenAuthentication, JoinRoom.Body, JoinRoom.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/join/{roomIdOrAlias}",
      httpMethod = HttpMethods.POST,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[JoinRoom.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JoinRoom.OK]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[Seq[String]]]("server_name" -> server_name)
      ),
      inPath = Map(
        "roomIdOrAlias" -> roomIdOrAlias
      ),
      inHeader = Map.empty
    )

}
