/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.ListPublicRoomsData._
import de.ship.matrixscala.json.clientserver.ListPublicRoomsJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/list_public_rooms.yaml"
  */
object ListPublicRoomsApi {

  /**
    * <h1>getRoomVisibilityOnDirectory</h1>
    *
    * Gets the visibility of a given room on the server's public room directory.
    *
    * @param roomId The room ID.
    */
  def getRoomVisibilityOnDirectory(
      roomId: String
  ): ApiRequest[NoAuthentication, JsObject, GetRoomVisibilityOnDirectory.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/directory/list/room/{roomId}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetRoomVisibilityOnDirectory.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>setRoomVisibilityOnDirectory</h1>
    *
    * Sets the visibility of a given room in the server's public room
    * directory.
    *
    * Servers may choose to implement additional access control checks
    * here, for instance that room visibility can only be changed by
    * the room creator or a server administrator.
    *
    * @param roomId The room ID.
    */
  def setRoomVisibilityOnDirectory(
      body: SetRoomVisibilityOnDirectory.Body,
      roomId: String
  ): ApiRequest[AccessTokenAuthentication, SetRoomVisibilityOnDirectory.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/directory/list/room/{roomId}",
      httpMethod = HttpMethods.PUT,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[SetRoomVisibilityOnDirectory.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>getPublicRooms</h1>
    *
    * Lists the public rooms on the server.
    *
    * This API returns paginated responses. The rooms are ordered by the number
    * of joined members, with the largest rooms first.
    *
    * @param limit Limit the number of results returned.
    *
    * @param since A pagination token from a previous request, allowing clients to
    * get the next (or previous) batch of rooms.
    * The direction of pagination is specified solely by which token
    * is supplied, rather than via an explicit flag.
    *
    * @param server The server to fetch the public room lists from. Defaults to the
    * local server.
    */
  def getPublicRooms(
      limit: Option[Int] = None,
      since: Option[String] = None,
      server: Option[String] = None
  ): ApiRequest[NoAuthentication, JsObject, Definitions.PublicRoomsResponse] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/publicRooms",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Definitions.PublicRoomsResponse]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[Int]]("limit"     -> limit),
        fromQueryEntry[Option[String]]("since"  -> since),
        fromQueryEntry[Option[String]]("server" -> server)
      ),
      inPath = Map.empty,
      inHeader = Map.empty
    )

  /**
    * <h1>queryPublicRooms</h1>
    *
    * Lists the public rooms on the server, with optional filter.
    *
    * This API returns paginated responses. The rooms are ordered by the number
    * of joined members, with the largest rooms first.
    *
    * @param server The server to fetch the public room lists from. Defaults to the
    * local server.
    */
  def queryPublicRooms(
      body: QueryPublicRooms.Body,
      server: Option[String] = None
  ): ApiRequest[AccessTokenAuthentication, QueryPublicRooms.Body, Definitions.PublicRoomsResponse] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/publicRooms",
      httpMethod = HttpMethods.POST,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[QueryPublicRooms.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Definitions.PublicRoomsResponse]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[String]]("server" -> server)
      ),
      inPath = Map.empty,
      inHeader = Map.empty
    )

}
