/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.LoginData._
import de.ship.matrixscala.json.clientserver.LoginJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/login.yaml"
  */
object LoginApi {

  /**
    * <h1>getLoginFlows</h1>
    *
    * Gets the homeserver's supported login types to authenticate users. Clients
    * should pick one of these and supply it as the `type` when logging in.
    */
  def getLoginFlows(
  ): ApiRequest[NoAuthentication, JsObject, GetLoginFlows.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/login",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetLoginFlows.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map.empty,
      inHeader = Map.empty
    )

  /**
    * <h1>login</h1>
    *
    * Authenticates the user, and issues an access token they can
    * use to authorize themself in subsequent requests.
    *
    * If the client does not supply a `device_id`, the server must
    * auto-generate one.
    *
    * The returned access token must be associated with the `device_id`
    * supplied by the client or generated by the server. The server may
    * invalidate any access token previously associated with that device. See
    * [Relationship between access tokens and devices](/client-server-api/#relationship-between-access-tokens-and-devices).
    */
  def login(
      body: Login.Body
  ): ApiRequest[NoAuthentication, Login.Body, Login.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/login",
      httpMethod = HttpMethods.POST,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[Login.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Login.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map.empty,
      inHeader = Map.empty
    )

}
