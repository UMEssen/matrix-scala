/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.RoomsData._
import de.ship.matrixscala.json.clientserver.RoomsJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/rooms.yaml"
  */
object RoomsApi {

  /**
    * <h1>getOneRoomEvent</h1>
    *
    * Get a single event based on `roomId/eventId`. You must have permission to
    * retrieve this event e.g. by being a member in the room for this event.
    *
    * @param roomId The ID of the room the event is in.
    *
    * @param eventId The event ID to get.
    */
  def getOneRoomEvent(
      roomId: String,
      eventId: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, Definitions.ClientEvent] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/rooms/{roomId}/event/{eventId}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Definitions.ClientEvent]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomId"  -> roomId,
        "eventId" -> eventId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>getRoomStateWithKey</h1>
    *
    * Looks up the contents of a state event in a room. If the user is
    * joined to the room then the state is taken from the current
    * state of the room. If the user has left the room then the state is
    * taken from the state of the room when they left.
    *
    * @param roomId The room to look up the state in.
    *
    * @param eventType The type of state to look up.
    *
    * @param stateKey The key of the state to look up. Defaults to an empty string. When
    * an empty string, the trailing slash on this endpoint is optional.
    */
  def getRoomStateWithKey(
      roomId: String,
      eventType: String,
      stateKey: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/rooms/{roomId}/state/{eventType}/{stateKey}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomId"    -> roomId,
        "eventType" -> eventType,
        "stateKey"  -> stateKey
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>getRoomState</h1>
    *
    * Get the state events for the current state of a room.
    *
    * @param roomId The room to look up the state for.
    */
  def getRoomState(
      roomId: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, Seq[Definitions.ClientEvent]] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/rooms/{roomId}/state",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Seq[Definitions.ClientEvent]]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>getMembersByRoom</h1>
    *
    * Get the list of members for this room.
    *
    * @param roomId The room to get the member events for.
    *
    * @param at The point in time (pagination token) to return members for in the room.
    * This token can be obtained from a `prev_batch` token returned for
    * each room by the sync API. Defaults to the current state of the room,
    * as determined by the server.
    *
    * @param membership The kind of membership to filter for. Defaults to no filtering if
    * unspecified. When specified alongside `not_membership`, the two
    * parameters create an 'or' condition: either the membership *is*
    * the same as `membership` **or** *is not* the same as `not_membership`.
    *
    * @param not_membership The kind of membership to exclude from the results. Defaults to no
    * filtering if unspecified.
    */
  def getMembersByRoom(
      roomId: String,
      at: Option[String] = None,
      membership: Option[String] = None,
      not_membership: Option[String] = None
  ): ApiRequest[AccessTokenAuthentication, JsObject, GetMembersByRoom.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/rooms/{roomId}/members",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetMembersByRoom.OK]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[String]]("at"             -> at),
        fromQueryEntry[Option[String]]("membership"     -> membership),
        fromQueryEntry[Option[String]]("not_membership" -> not_membership)
      ),
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>getJoinedMembersByRoom</h1>
    *
    * This API returns a map of MXIDs to member info objects for members of the room. The current user must be in the room for it to work, unless it is an Application Service in which case any of the AS's users must be in the room. This API is primarily for Application Services and should be faster to respond than `/members` as it can be implemented more efficiently on the server.
    *
    * @param roomId The room to get the members of.
    */
  def getJoinedMembersByRoom(
      roomId: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, GetJoinedMembersByRoom.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/rooms/{roomId}/joined_members",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetJoinedMembersByRoom.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

}
