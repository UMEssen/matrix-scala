/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.identity

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.identity.V2PubkeyData._
import de.ship.matrixscala.json.identity.V2PubkeyJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/identity/v2_pubkey.yaml"
  */
object V2PubkeyApi {

  /**
    * <h1>getPubKeyV2</h1>
    *
    * Get the public key for the passed key ID.
    *
    * @param keyId The ID of the key. This should take the form algorithm:identifier
    * where algorithm identifies the signing algorithm, and the identifier
    * is an opaque string.
    */
  def getPubKeyV2(
      keyId: String
  ): ApiRequest[NoAuthentication, JsObject, GetPubKeyV2.OK] =
    ApiRequest(
      endpoint = "/_matrix/identity/v2/pubkey/{keyId}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetPubKeyV2.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "keyId" -> keyId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>isPubKeyValidV2</h1>
    *
    * Check whether a long-term public key is valid. The response should always
    * be the same, provided the key exists.
    *
    * @param public_key The unpadded base64-encoded public key to check.
    */
  def isPubKeyValidV2(
      public_key: String
  ): ApiRequest[NoAuthentication, JsObject, IsPubKeyValidV2.OK] =
    ApiRequest(
      endpoint = "/_matrix/identity/v2/pubkey/isvalid",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[IsPubKeyValidV2.OK]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("public_key" -> public_key)
      ),
      inPath = Map.empty,
      inHeader = Map.empty
    )

  /**
    * <h1>isEphemeralPubKeyValidV2</h1>
    *
    * Check whether a short-term public key is valid.
    *
    * @param public_key The unpadded base64-encoded public key to check.
    */
  def isEphemeralPubKeyValidV2(
      public_key: String
  ): ApiRequest[NoAuthentication, JsObject, IsEphemeralPubKeyValidV2.OK] =
    ApiRequest(
      endpoint = "/_matrix/identity/v2/pubkey/ephemeral/isvalid",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[IsEphemeralPubKeyValidV2.OK]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[String]("public_key" -> public_key)
      ),
      inPath = Map.empty,
      inHeader = Map.empty
    )

}
