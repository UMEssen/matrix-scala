/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.DeviceManagementData._
import de.ship.matrixscala.json.clientserver.DeviceManagementJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/device_management.yaml"
  */
object DeviceManagementApi {

  /**
    * <h1>getDevices</h1>
    *
    * Gets information about all devices for the current user.
    */
  def getDevices(
  ): ApiRequest[AccessTokenAuthentication, JsObject, GetDevices.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/devices",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[GetDevices.OK]])
      ),
      inQuery = Map.empty,
      inPath = Map.empty,
      inHeader = Map.empty
    )

  /**
    * <h1>getDevice</h1>
    *
    * Gets information on a single device, by device id.
    *
    * @param deviceId The device to retrieve.
    */
  def getDevice(
      deviceId: String
  ): ApiRequest[AccessTokenAuthentication, JsObject, Definitions.Device] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/devices/{deviceId}",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Definitions.Device]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "deviceId" -> deviceId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>updateDevice</h1>
    *
    * Updates the metadata on the given device.
    *
    * @param deviceId The device to update.
    */
  def updateDevice(
      body: UpdateDevice.Body,
      deviceId: String
  ): ApiRequest[AccessTokenAuthentication, UpdateDevice.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/devices/{deviceId}",
      httpMethod = HttpMethods.PUT,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[UpdateDevice.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "deviceId" -> deviceId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>deleteDevice</h1>
    *
    * This API endpoint uses the [User-Interactive Authentication API](/client-server-api/#user-interactive-authentication-api).
    *
    * Deletes the given device, and invalidates any access token associated with it.
    *
    * @param deviceId The device to delete.
    */
  def deleteDevice(
      body: DeleteDevice.Body,
      deviceId: String
  ): ApiRequest[AccessTokenAuthentication, DeleteDevice.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/devices/{deviceId}",
      httpMethod = HttpMethods.DELETE,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[DeleteDevice.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "deviceId" -> deviceId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>deleteDevices</h1>
    *
    * This API endpoint uses the [User-Interactive Authentication API](/client-server-api/#user-interactive-authentication-api).
    *
    * Deletes the given devices, and invalidates any access token associated with them.
    */
  def deleteDevices(
      body: DeleteDevices.Body
  ): ApiRequest[AccessTokenAuthentication, DeleteDevices.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/delete_devices",
      httpMethod = HttpMethods.POST,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[DeleteDevices.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map.empty,
      inHeader = Map.empty
    )

}
