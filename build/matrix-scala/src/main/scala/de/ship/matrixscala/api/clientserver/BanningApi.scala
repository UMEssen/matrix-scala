/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.BanningData._
import de.ship.matrixscala.json.clientserver.BanningJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/banning.yaml"
  */
object BanningApi {

  /**
    * <h1>ban</h1>
    *
    * Ban a user in the room. If the user is currently in the room, also kick them.
    *
    * When a user is banned from a room, they may not join it or be invited to it until they are unbanned.
    *
    * The caller must have the required power level in order to perform this operation.
    *
    * @param roomId The room identifier (not alias) from which the user should be banned.
    */
  def ban(
      body: Ban.Body,
      roomId: String
  ): ApiRequest[AccessTokenAuthentication, Ban.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/rooms/{roomId}/ban",
      httpMethod = HttpMethods.POST,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[Ban.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

  /**
    * <h1>unban</h1>
    *
    * Unban a user from the room. This allows them to be invited to the room,
    * and join if they would otherwise be allowed to join according to its join rules.
    *
    * The caller must have the required power level in order to perform this operation.
    *
    * @param roomId The room identifier (not alias) from which the user should be unbanned.
    */
  def unban(
      body: Unban.Body,
      roomId: String
  ): ApiRequest[AccessTokenAuthentication, Unban.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/rooms/{roomId}/unban",
      httpMethod = HttpMethods.POST,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[Unban.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomId" -> roomId
      ),
      inHeader = Map.empty
    )

}
