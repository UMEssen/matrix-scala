/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.ReportContentData._
import de.ship.matrixscala.json.clientserver.ReportContentJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/report_content.yaml"
  */
object ReportContentApi {

  /**
    * <h1>reportContent</h1>
    *
    * Reports an event as inappropriate to the server, which may then notify
    * the appropriate people.
    *
    * @param roomId The room in which the event being reported is located.
    *
    * @param eventId The event to report.
    */
  def reportContent(
      body: ReportContent.Body,
      roomId: String,
      eventId: String
  ): ApiRequest[AccessTokenAuthentication, ReportContent.Body, JsObject] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/rooms/{roomId}/report/{eventId}",
      httpMethod = HttpMethods.POST,
      body = body,
      bodyFormat = implicitly[RootJsonFormat[ReportContent.Body]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[JsObject]])
      ),
      inQuery = Map.empty,
      inPath = Map(
        "roomId"  -> roomId,
        "eventId" -> eventId
      ),
      inHeader = Map.empty
    )

}
