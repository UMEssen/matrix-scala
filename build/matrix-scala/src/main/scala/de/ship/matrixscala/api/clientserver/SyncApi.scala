/**
  * <h1>matrix-scala</h1>
  * @version 1.0.0
  * @author kirill.sokol@uk-essen.de
  *
  * This file was generated.
  *
  * DO NOT EDIT THIS FILE. Any changes to this file will be overwritten
  * the next time the code is generated. If you need to modify the code
  * generated by this tool, make your changes to the generator script
  * and regenerate the code.
  */

package de.ship.matrixscala.api.clientserver

import de.ship.matrixscala.model.Definitions
import de.ship.matrixscala.model.clientserver.SyncData._
import de.ship.matrixscala.json.clientserver.SyncJsonFormats._
import de.ship.matrixscala.json.DefinitionFormats._
import de.ship.matrixscala.core._
import de.ship.matrixscala.core.ResponseMappings._
import de.ship.matrixscala.core.QueryBuilding._
import de.ship.matrixscala.core.HeaderBuilding._
import akka.http.scaladsl.model.HttpMethods
import spray.json.{JsObject, JsValue, RootJsonFormat}
import spray.json.DefaultJsonProtocol._

/**
  * @see "defined in ./build/matrix-spec/data/api/client-server/sync.yaml"
  */
object SyncApi {

  /**
    * <h1>sync</h1>
    *
    * Synchronise the client's state with the latest state on the server.
    * Clients use this API when they first log in to get an initial snapshot
    * of the state on the server, and then continue to call this API to get
    * incremental deltas to the state, and to receive new messages.
    *
    * Note*: This endpoint supports lazy-loading. See [Filtering](/client-server-api/#filtering)
    * for more information. Lazy-loading members is only supported on a `StateFilter`
    * for this endpoint. When lazy-loading is enabled, servers MUST include the
    * syncing user's own membership event when they join a room, or when the
    * full state of rooms is requested, to aid discovering the user's avatar &
    * displayname.
    *
    * Further, like other members, the user's own membership event is eligible
    * for being considered redundant by the server. When a sync is `limited`,
    * the server MUST return membership events for events in the gap
    * (between `since` and the start of the returned timeline), regardless
    * as to whether or not they are redundant. This ensures that joins/leaves
    * and profile changes which occur during the gap are not lost.
    *
    * Note that the default behaviour of `state` is to include all membership
    * events, alongside other state, when lazy-loading is not enabled.
    *
    * @param filter The ID of a filter created using the filter API or a filter JSON
    * object encoded as a string. The server will detect whether it is
    * an ID or a JSON object by whether the first character is a `"{"`
    * open brace. Passing the JSON inline is best suited to one off
    * requests. Creating a filter using the filter API is recommended for
    * clients that reuse the same filter multiple times, for example in
    * long poll requests.
    *
    * See [Filtering](/client-server-api/#filtering) for more information.
    *
    * @param since A point in time to continue a sync from. This should be the
    * `next_batch` token returned by an earlier call to this endpoint.
    *
    * @param full_state Controls whether to include the full state for all rooms the user
    * is a member of.
    *
    * If this is set to `true`, then all state events will be returned,
    * even if `since` is non-empty. The timeline will still be limited
    * by the `since` parameter. In this case, the `timeout` parameter
    * will be ignored and the query will return immediately, possibly with
    * an empty timeline.
    *
    * If `false`, and `since` is non-empty, only state which has
    * changed since the point indicated by `since` will be returned.
    *
    * By default, this is `false`.
    *
    * @param set_presence Controls whether the client is automatically marked as online by
    * polling this API. If this parameter is omitted then the client is
    * automatically marked as online when it uses this API. Otherwise if
    * the parameter is set to "offline" then the client is not marked as
    * being online when it uses this API. When set to "unavailable", the
    * client is marked as being idle.
    *
    * @param timeout The maximum time to wait, in milliseconds, before returning this
    * request. If no events (or other data) become available before this
    * time elapses, the server will return a response with empty fields.
    *
    * By default, this is `0`, so the server will return immediately
    * even if the response is empty.
    */
  def sync(
      filter: Option[String] = None,
      since: Option[String] = None,
      full_state: Option[Boolean] = None,
      set_presence: Option[String] = None,
      timeout: Option[Int] = None
  ): ApiRequest[AccessTokenAuthentication, JsObject, Sync.OK] =
    ApiRequest(
      endpoint = "/_matrix/client/v3/sync",
      httpMethod = HttpMethods.GET,
      body = JsObject(),
      bodyFormat = implicitly[RootJsonFormat[JsObject]],
      responseMappings = Seq(
        SingleResponseMapping(200, implicitly[RootJsonFormat[Sync.OK]])
      ),
      inQuery = buildQuery(
        fromQueryEntry[Option[String]]("filter"       -> filter),
        fromQueryEntry[Option[String]]("since"        -> since),
        fromQueryEntry[Option[Boolean]]("full_state"  -> full_state),
        fromQueryEntry[Option[String]]("set_presence" -> set_presence),
        fromQueryEntry[Option[Int]]("timeout"         -> timeout)
      ),
      inPath = Map.empty,
      inHeader = Map.empty
    )

}
