{% include 'header.j2' %}

package {{data.package_config.package_base}}.core

object QueryBuilding {
  type QueryData = String

  sealed trait QueryComponentBuilder[T] {
    def build(data: T): Option[QueryData]
  }


  implicit object stringQueryBuilder extends QueryComponentBuilder[String] {
    override def build(data: String): Option[QueryData] = Some(data)
  }

  implicit object intQueryBuilder extends QueryComponentBuilder[Int] {
    override def build(data: Int): Option[QueryData] = Some(data.toString)
  }

  implicit object longQueryBuilder extends QueryComponentBuilder[Long] {
    override def build(data: Long): Option[QueryData] = Some(data.toString)
  }

  implicit object floatQueryBuilder extends QueryComponentBuilder[Float] {
    override def build(data: Float): Option[QueryData] = Some(data.toString)
  }
  implicit object booleanQueryBuilder extends QueryComponentBuilder[Boolean] {
    override def build(data: Boolean): Option[QueryData] = Some(data.toString)
  }

  implicit def optionQueryBuilder[T](implicit tBuilder: QueryComponentBuilder[T]): QueryComponentBuilder[Option[T]] = {
    object OptionBuilder extends QueryComponentBuilder[Option[T]] {
      override def build(data: Option[T]): Option[QueryData] = data.flatMap(tBuilder.build)
    }
    OptionBuilder
  }

  //TODO: this WILL fail for T=String, if the data contains a comma
  implicit def seqQueryBuilder[T](implicit tBuilder: QueryComponentBuilder[T]): QueryComponentBuilder[Seq[T]] = {
    object OptionBuilder extends QueryComponentBuilder[Seq[T]] {
      override def build(data: Seq[T]): Option[QueryData] = Some(data.flatMap(tBuilder.build).mkString(","))
    }
    OptionBuilder
  }

  def buildQuery(entries: Option[(String, QueryData)]*): Map[String, QueryData] = entries.flatten.toMap

  def fromQueryEntry[T](t: (String, T))(implicit builder: QueryComponentBuilder[T]): Option[(String, QueryData)] = builder.build(t._2).map(t._1 -> _)

}
